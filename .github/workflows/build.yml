---
name: build

on:
  schedule:
    - cron: '0 3 * * *'
  push:
  pull_request:

env:
  DOCKERHUB_REPOSITORY: ksmanis/gentoo-distcc

jobs:
  build_images:
    strategy:
      fail-fast: false
      matrix:
        arch: ["386", "amd64", "arm/v6", "arm/v7", "arm64", "ppc64le"]
        target: ["tcp", "ssh"]
    name: ${{ matrix.arch }}:${{ matrix.target }} image
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Prepare build variables
        id: prep
        run: |
          BUILD_DATE=$(date -u +'%Y%m%d')
          BUILD_DATETIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          ARCH=$(echo "${{ matrix.arch }}" | tr -d '/')
          TAG="${ARCH}-${{ matrix.target }}"
          IMAGE="${DOCKERHUB_REPOSITORY}:${TAG}"
          QEMU_PLATFORM=$(echo "${{ matrix.arch }}" | cut -d '/' -f 1)
          echo "::set-output name=BUILD_DATE::${BUILD_DATE}"
          echo "::set-output name=BUILD_DATETIME::${BUILD_DATETIME}"
          echo "::set-output name=IMAGE::${IMAGE}"
          echo "::set-output name=QEMU_PLATFORM::${QEMU_PLATFORM}"
      - name: Preprocess Dockerfile
        if: matrix.arch == '386'
        run: |
          sed -i 's/--security=sandbox/--security=insecure/g' Dockerfile
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.arch != '386' && matrix.arch != 'amd64'
        with:
          platforms: ${{ steps.prep.outputs.QEMU_PLATFORM }}
      - name: Set up buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --allow-insecure-entitlement security.insecure
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          allow: security.insecure
          build-args: |
            BASE_TAG=${{ steps.prep.outputs.BUILD_DATE }}
            BUILD_DATETIME=${{ steps.prep.outputs.BUILD_DATETIME }}
            VCS_REF=${{ github.sha }}
          tags: |
            ${{ steps.prep.outputs.IMAGE }}
            ${{ steps.prep.outputs.IMAGE }}-${{ steps.prep.outputs.BUILD_DATE }}
          platforms: linux/${{ matrix.arch }}
          target: distcc-${{ matrix.target }}
          load: true
      - name: Inspect image
        run: |
          docker image inspect ${{ steps.prep.outputs.IMAGE }}
      - name: Inspect distcc
        run: |
          docker run --rm ${{ steps.prep.outputs.IMAGE }} distcc --version
      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          context: .
          allow: security.insecure
          tags: ${{ steps.prep.outputs.IMAGE }}-test
          platforms: linux/${{ matrix.arch }}
          target: distcc-${{ matrix.target }}-test
          load: true
      - name: Test distcc
        env:
          IMAGE: ${{ steps.prep.outputs.IMAGE }}
        run: |
          if [ "${{ matrix.target }}" = "ssh" ]; then
            AUTHORIZED_KEYS="$(docker run --rm ${{ steps.prep.outputs.IMAGE }}-test cat .ssh/id_ed25519.pub)"
            export AUTHORIZED_KEYS
          fi
          docker-compose -f docker-compose.test.yml up \
            --abort-on-container-exit \
            --exit-code-from distcc-${{ matrix.target }}-client \
            distcc-${{ matrix.target }}-client distcc-${{ matrix.target }}-server
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: github.event_name == 'schedule'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push image
        if: github.event_name == 'schedule'
        run: |
          docker push "${{ steps.prep.outputs.IMAGE }}"
          docker push "${{ steps.prep.outputs.IMAGE }}-${{ steps.prep.outputs.BUILD_DATE }}"
  build_manifests:
    strategy:
      matrix:
        target: ["tcp", "ssh"]
    name: ${{ matrix.target }} manifest
    runs-on: ubuntu-latest
    needs: build_images
    if: github.event_name == 'schedule'
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push manifest list
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          ARCHES=("386" "amd64" "armv6" "armv7" "arm64" "ppc64le")
          BUILD_DATE=$(date -u +'%Y%m%d')
          MANIFEST_TAGS=("${{ matrix.target }}" "${{ matrix.target }}-${BUILD_DATE}")

          for MANIFEST_TAG in "${MANIFEST_TAGS[@]}"; do
            MANIFEST="${DOCKERHUB_REPOSITORY}:${MANIFEST_TAG}"
            IMAGES=()
            for ARCH in "${ARCHES[@]}"; do
              IMAGE="${DOCKERHUB_REPOSITORY}:${ARCH}-${MANIFEST_TAG}"
              if docker manifest inspect "${IMAGE}" 1>/dev/null 2>&1; then
                IMAGES+=("${IMAGE}")
              fi
            done
            docker manifest create "${MANIFEST}" "${IMAGES[@]}"
            docker manifest push "${MANIFEST}"
          done
  update_readme:
    name: README
    runs-on: ubuntu-latest
    needs: build_manifests
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update repo description
        uses: peter-evans/dockerhub-description@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
